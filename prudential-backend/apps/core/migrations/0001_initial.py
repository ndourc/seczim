# Generated by Django 5.2.3 on 2025-08-22 18:47

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SMI',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=255)),
                ('license_number', models.CharField(max_length=100, unique=True)),
                ('registration_date', models.DateField(default=django.utils.timezone.now)),
                ('business_type', models.CharField(default='Financial Services', max_length=100)),
                ('address', models.TextField(default='Address to be provided')),
                ('phone', models.CharField(default='Phone to be provided', max_length=20)),
                ('email', models.EmailField(default='email@example.com', max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('CANCELLED', 'Cancelled'), ('PENDING', 'Pending Review')], default='ACTIVE', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'SMI',
                'verbose_name_plural': 'SMIs',
                'ordering': ['company_name'],
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_number', models.CharField(max_length=50, unique=True)),
                ('case_type', models.CharField(choices=[('INVESTIGATION', 'Investigation'), ('AD_HOC_INSPECTION', 'Ad-hoc Inspection'), ('COMPLAINT', 'Complaint Investigation'), ('REGULATORY_ACTION', 'Regulatory Action'), ('RISK_ESCALATION', 'Risk Escalation')], default='INVESTIGATION', max_length=30)),
                ('title', models.CharField(default='Case title to be provided', max_length=255)),
                ('description', models.TextField(default='Case description to be provided')),
                ('complainant', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('ASSIGNED', 'Assigned'), ('IN_PROGRESS', 'In Progress'), ('UNDER_REVIEW', 'Under Review'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed')], default='OPEN', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=20)),
                ('opened_date', models.DateField(default=django.utils.timezone.now)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('resolved_date', models.DateField(blank=True, null=True)),
                ('progress_notes', models.TextField(blank=True)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='case_attachments/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('smi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='CaseNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_notes', to='core.case')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('LICENSING_UPDATE', 'Licensing Portal Update'), ('MARKET_SUBMISSION', 'Market Submission'), ('TRAINING_VIDEO', 'New Training Video'), ('MATERIAL_UPLOAD', 'New Material Uploaded'), ('RISK_THRESHOLD', 'Risk Threshold Alert'), ('MANAGEMENT_CHANGE', 'Management Change Alert'), ('BUSINESS_ACTIVITY', 'Business Activity Change'), ('INSPECTION_DUE', 'Inspection Due'), ('COMPLIANCE_DEADLINE', 'Compliance Deadline'), ('BREACH_ALERT', 'Breach Alert')], default='MARKET_SUBMISSION', max_length=30)),
                ('title', models.CharField(default='Notification title', max_length=255)),
                ('message', models.TextField(default='Notification message')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=20)),
                ('content_link', models.URLField(blank=True, null=True)),
                ('related_entity_type', models.CharField(blank=True, max_length=50)),
                ('related_entity_id', models.UUIDField(blank=True, null=True)),
                ('read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductOffering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=255)),
                ('product_category', models.CharField(max_length=100)),
                ('income_contribution', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_offerings', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='MeetingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_date', models.DateField()),
                ('meeting_type', models.CharField(choices=[('BOARD', 'Board Meeting'), ('MANAGEMENT', 'Management Meeting'), ('AUDIT', 'Audit Committee'), ('RISK', 'Risk Committee')], max_length=50)),
                ('attendees', models.TextField()),
                ('agenda', models.TextField()),
                ('decisions', models.TextField()),
                ('action_items', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meeting_logs', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='LicensingBreach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breach_type', models.CharField(choices=[('MINOR', 'Minor Breach'), ('MAJOR', 'Major Breach'), ('CRITICAL', 'Critical Breach'), ('CANCELLATION', 'License Cancellation'), ('SUSPENSION', 'License Suspension')], default='MINOR', max_length=20)),
                ('breach_date', models.DateField(default=django.utils.timezone.now)),
                ('description', models.TextField(default='Breach description to be provided')),
                ('regulatory_reference', models.CharField(default='Regulatory reference to be specified', help_text='Regulatory provision violated', max_length=255)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('INVESTIGATING', 'Investigating'), ('RESOLVED', 'Resolved'), ('ESCALATED', 'Escalated'), ('CLOSED', 'Closed')], default='OPEN', max_length=20)),
                ('investigation_notes', models.TextField(blank=True)),
                ('resolution_date', models.DateField(blank=True, null=True)),
                ('resolution_action', models.TextField(blank=True)),
                ('penalty_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licensing_breaches', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='InspectionReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_type', models.CharField(choices=[('ONSITE', 'Onsite Inspection'), ('OFFSITE', 'Offsite Inspection'), ('FOLLOW_UP', 'Follow-up Inspection'), ('AD_HOC', 'Ad-hoc Inspection')], default='ONSITE', max_length=20)),
                ('inspection_date', models.DateField(default=django.utils.timezone.now)),
                ('report_file', models.FileField(upload_to='inspection_reports/')),
                ('executive_summary', models.TextField(default='Executive summary to be provided')),
                ('scope', models.TextField(default='Inspection scope to be defined')),
                ('methodology', models.TextField(default='Inspection methodology to be documented')),
                ('findings', models.TextField(default='Findings to be documented')),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=20)),
                ('risk_areas', models.TextField(default='Risk areas to be identified', help_text='Areas of focus: CDD, record-keeping, reporting compliance')),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('IN_PROGRESS', 'In Progress'), ('RESOLVED', 'Resolved'), ('ESCALATED', 'Escalated'), ('CLOSED', 'Closed')], default='OPEN', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inspection_reports', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='ClienteleProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_type', models.CharField(choices=[('RETAIL', 'Retail'), ('WHOLESALE', 'Wholesale'), ('INSTITUTIONAL', 'Institutional'), ('CORPORATE', 'Corporate')], max_length=100)),
                ('client_count', models.IntegerField()),
                ('income_contribution', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('period', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clientele_profiles', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='ClientAssetMix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.DateField(default=django.utils.timezone.now)),
                ('asset_class', models.CharField(choices=[('EQUITIES', 'Equities'), ('FIXED_INCOME', 'Fixed Income'), ('ALTERNATIVES', 'Alternatives'), ('CASH', 'Cash & Equivalents'), ('REAL_ESTATE', 'Real Estate'), ('COMMODITIES', 'Commodities')], default='EQUITIES', max_length=100)),
                ('allocation_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('market_value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('net_capital_position', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('sec_compliance_status', models.CharField(choices=[('COMPLIANT', 'Compliant'), ('NON_COMPLIANT', 'Non-Compliant'), ('UNDER_REVIEW', 'Under Review')], default='COMPLIANT', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_asset_mixes', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='BoardMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('position', models.CharField(max_length=100)),
                ('appointment_date', models.DateField()),
                ('resignation_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_members', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='StressTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_date', models.DateField(default=django.utils.timezone.now)),
                ('test_type', models.CharField(choices=[('SMI_LEVEL', 'SMI Level'), ('INDUSTRY_LEVEL', 'Industry Level'), ('SCENARIO', 'Scenario Based')], default='SMI_LEVEL', max_length=50)),
                ('scenario_name', models.CharField(default='Default Scenario', max_length=255)),
                ('scenario_description', models.TextField(default='Scenario description to be provided')),
                ('capital_adequacy_impact', models.FloatField(default=0, help_text='Impact on CAR')),
                ('liquidity_impact', models.FloatField(default=0, help_text='Impact on liquidity ratio')),
                ('profitability_impact', models.FloatField(default=0, help_text='Impact on profitability')),
                ('risk_score_change', models.FloatField(default=0, help_text='Change in risk score')),
                ('passed', models.BooleanField(default=False)),
                ('threshold_breach', models.BooleanField(default=False)),
                ('recommendations', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('smi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stress_tests', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='SupervisoryIntervention',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intervention_type', models.CharField(choices=[('WARNING', 'Warning Letter'), ('FINE', 'Monetary Fine'), ('SUSPENSION', 'Temporary Suspension'), ('RESTRICTION', 'Business Restriction'), ('REQUIREMENT', 'Additional Requirements'), ('ENHANCED_MONITORING', 'Enhanced Monitoring')], default='WARNING', max_length=30)),
                ('intervention_date', models.DateField(default=django.utils.timezone.now)),
                ('reason', models.TextField(default='Intervention reason to be specified')),
                ('description', models.TextField(default='Intervention description to be provided')),
                ('intensity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=20)),
                ('frequency', models.CharField(choices=[('ONE_TIME', 'One Time'), ('RECURRING', 'Recurring'), ('CONTINUOUS', 'Continuous')], default='ONE_TIME', max_length=20)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('outcome', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supervisory_interventions', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='SystemAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(default='Unknown action', max_length=100)),
                ('model_name', models.CharField(default='Unknown model', max_length=100)),
                ('object_id', models.CharField(default='Unknown ID', max_length=100)),
                ('object_repr', models.CharField(default='Unknown object', max_length=255)),
                ('change_message', models.TextField(default='Change message to be provided')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VA_VASP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_date', models.DateField(default=django.utils.timezone.now)),
                ('is_va_issuer', models.BooleanField(default=False)),
                ('is_vasp', models.BooleanField(default=False)),
                ('va_types', models.TextField(blank=True, help_text='Types of virtual assets handled')),
                ('va_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vasp_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_va_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('securities_exposure', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('regulatory_compliance', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('risk_profile', models.TextField(default='Risk profile to be generated')),
                ('recommendations', models.TextField(default='Recommendations to be provided')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='va_vasp_analyses', to='core.smi')),
            ],
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateField(default=django.utils.timezone.now)),
                ('assessment_period', models.CharField(choices=[('QUARTERLY', 'Quarterly'), ('ANNUAL', 'Annual'), ('AD_HOC', 'Ad-hoc')], default='QUARTERLY', max_length=20)),
                ('fsi_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('inherent_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('operational_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('market_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('credit_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('car', models.FloatField(default=15, help_text='Capital Adequacy Ratio')),
                ('liquidity_ratio', models.FloatField(blank=True, null=True)),
                ('leverage_ratio', models.FloatField(blank=True, null=True)),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM_LOW', 'Medium-Low Risk'), ('MEDIUM', 'Medium Risk'), ('MEDIUM_HIGH', 'Medium-High Risk'), ('HIGH', 'High Risk'), ('CRITICAL', 'Critical Risk')], default='MEDIUM', max_length=20)),
                ('compliance_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_risk_score', models.FloatField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('REVIEW_REQUIRED', 'Review Required')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='core.smi')),
            ],
            options={
                'ordering': ['-assessment_date'],
                'unique_together': {('smi', 'assessment_date', 'assessment_period')},
            },
        ),
        migrations.CreateModel(
            name='FinancialStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.DateField()),
                ('statement_type', models.CharField(choices=[('COMPREHENSIVE_INCOME', 'Comprehensive Income'), ('FINANCIAL_POSITION', 'Financial Position'), ('CASH_FLOW', 'Cash Flow')], default='FINANCIAL_POSITION', max_length=50)),
                ('total_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('profit_before_tax', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_assets', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_liabilities', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_equity', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('gross_margin', models.FloatField(blank=True, null=True)),
                ('profit_margin', models.FloatField(blank=True, null=True)),
                ('debt_to_equity', models.FloatField(blank=True, null=True)),
                ('file_upload', models.FileField(blank=True, null=True, upload_to='financial_statements/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_statements', to='core.smi')),
            ],
            options={
                'unique_together': {('smi', 'period', 'statement_type')},
            },
        ),
        migrations.CreateModel(
            name='ComplianceIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.DateField(default=django.utils.timezone.now)),
                ('analysis_period', models.CharField(choices=[('QUARTERLY', 'Quarterly'), ('ANNUAL', 'Annual')], default='QUARTERLY', max_length=20)),
                ('overall_compliance_score', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('regulatory_compliance', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('operational_compliance', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('financial_compliance', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('risk_calibration_score', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('risk_adjustment_factor', models.FloatField(default=1.0, help_text='Factor applied based on inspection results')),
                ('post_inspection_adjustment', models.FloatField(default=0)),
                ('final_compliance_score', models.FloatField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('smi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_indices', to='core.smi')),
            ],
            options={
                'unique_together': {('smi', 'period', 'analysis_period')},
            },
        ),
    ]
